name: "Checkov"

on:
  push:
    branches: [main, master]
  # pull_request:
  # The branches below must be a subset of the branches above
  # branches: [ main, master ]
  # paths-ignore:
  #   - "**/*.md"
  #   - "**/*.txt"
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    name: checkov-action
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true # optional: display only failed checks
          soft_fail: false # optional: do not return an error code if there are failed checks
          framework: all # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          output_format: sarif # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          log_level: DEBUG # optional: set log level. Default WARNING
          check: "LOW"
          #skip_check: BC_DKR_8
          # config_file: path/this_file
          # baseline: cloudformation/.checkov.baseline # optional: Path to a generated baseline file. Will only report results not in the baseline.

      - run: cat results.sarif
        if: always()

      - name: Upload Checkov scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        if: always()
        with:
          sarif_file: "results.sarif"
          
      - name: Upload checkov output
        uses: actions/upload-artifact@v1
        with:
          name: checkov.sarif
          path: results.sarif

  semgrep:
    runs-on: ubuntu-latest
    steps:
      # Fetch project source
      - uses: actions/checkout@v2

      - uses: returntocorp/semgrep-action@v1
        id: semgrep
        continue-on-error: true
        with:
          config: >- # more at semgrep.dev/explore
            p/security-audit
            p/owasp-top-ten
            p/xss
            p/r2c
          generateSarif: "1"

        # == Optional settings in the `with:` block

        # Instead of `config:`, use rules set in Semgrep App.
        # Get your token from semgrep.dev/manage/settings.
        #   publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

        # Never fail the build due to findings on pushes.
        # Instead, just collect findings for semgrep.dev/manage/findings
        #   auditOn: push

        # Upload findings to GitHub Advanced Security Dashboard [step 1/2]
        # See also the next step.
        #   generateSarif: "1"

        # Change job timeout (default is 1800 seconds; set to 0 to disable)
        # env:
        #   SEMGREP_TIMEOUT: 300

      # Upload findings to GitHub Advanced Security Dashboard [step 2/2]
      # - name: Upload SARIF file for GitHub Advanced Security Dashboard
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     sarif_file: semgrep.sarif
      #   if: always()

      - run: ls -l

      - name: Upload semgrep output
        uses: actions/upload-artifact@v1
        with:
          name: semgrep.sarif
          path: semgrep.sarif

      - name: Check on failures
        if: steps.semgrep.outcome != 'success'
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Detected semgrep findings')
            
